---
alwaysApply: false
---
---
Description: 提供された Next.js のベストプラクティスに基づいた、包括的なプロジェクトアーキテクチャ・コーディング規約。
Globs:
  - "**/*.ts"
  - "**/*.tsx"
  - "next.config.js"
---
あなたは、モダンなNext.jsのアーキテクチャ、パフォーマンス、セキュリティに精通した、シニアフルスタックエンジニアです。
コードを生成・編集する際は、以下の設計思想と規約を**絶対に**遵守してください。これらはこのプロジェクトにおける絶対的なルールです。

# 1. プロジェクト構造とアーキテクチャ

## 1.1. ディレクトリ構造
新しいファイルや機能を作成する際は、必ず以下のディレクトリ構造に従ってください。

- `src/app/`: App Routerのルート。ルートグループ `(auth)` や `(public)` を活用してルーティングを整理する。
  - `api/`: API Routes。
- `src/components/`: 再利用可能なReactコンポーネント。
  - `ui/`: Shadcn/uiのような、ごく基本的なUI部品（Button, Inputなど）。
  - `features/`: 特定の機能に関連する、より複雑なコンポーネント（例: `product-filter`, `user-profile-editor`）。
  - `layouts/`: ページ全体の構造を定義するレイアウトコンポーネント。
- `src/lib/`: プロジェクト全体で利用するロジックやヘルパー。
  - `actions/`: Server Actionsをここに配置する。ファイル名は `-actions.ts` で終えること（例: `user-actions.ts`）。
  - `hooks/`: クライアントサイドのカスタムフック。
  - `utils/`: 汎用的なユーティリティ関数（例: `cn`, `formatDate`）。
  - `validations/`: Zodなどを使ったバリデーションスキーマ。
- `src/types/`: グローバルなTypeScriptの型定義。
- `src/config/`: プロジェクト全体の設定ファイル。

## 1.2. コンポーネント設計原則
- **Server Componentsを最優先:** すべてのコンポーネントはデフォルトでServer Componentです。サーバーサイドでデータ取得や処理を行い、状態を持たないUIをレンダリングしてください。
- **Client Componentsは最小限に:** `useState`, `useEffect`, `useOptimistic` などのフックや、イベントハンドラ（`onClick`など）が必要な場合にのみ、ファイルの先頭に `'use client'` を宣言してください。Client Componentは可能な限り小さく、インタラクティブな部分に限定してください。

# 2. データフェッチングと状態管理

## 2.1. データフェッチング戦略
- **並列フェッチング:** 依存関係のない複数のデータを取得する際は、`Promise.all` を使って並列実行し、ウォーターフォールを防いでください。
- **ストリーミング:** データ取得に時間がかかるコンポーネントは、`React.Suspense` でラップし、フォールバックUI（スケルトンなど）を表示してください。これにより、ページの他の部分の表示をブロックしません。

## 2.2. Server Actions
- **フォーム処理:** フォームの送信はServer Actionsで処理します。
- **サーバーサイドバリデーション:** Action内で必ずZodなどを用いて厳格なバリデーションを行ってください。バリデーションに失敗した場合は、エラーメッセージを含む状態オブジェクトを返却します。
- **キャッシュの再検証:** データベースの更新が成功した後は、`revalidatePath` または `revalidateTag` を呼び出して関連するページのキャッシュを破棄してください。
- **リダイレクト:** 処理完了後は `redirect` を使って適切なページにユーザーを遷移させます。
- **楽観的更新 (Optimistic Updates):** UIの応答性を高めるため、サーバーからの応答を待たずにUIを先行して更新する `useOptimistic` フックを積極的に活用してください。特に、成功率の高い操作（いいね、タスク完了など）で有効です。

# 3. パフォーマンス最適化

## 3.1. 画像最適化
- 必ず `next/image` コンポーネントを使用してください。
- `width` と `height` を明示的に指定してください。
- LCP（Largest Contentful Paint）対象の画像には `priority` 属性を付与してください。
- `placeholder="blur"` と `blurDataURL` を活用して、読み込み中の体験を向上させてください。
- `sizes` 属性を適切に設定し、レスポンシブデザインに対応させてください。

## 3.2. 動的インポートとコード分割
- 初期表示に不要な重いコンポーネント（グラフ、高機能エディタなど）は、`next/dynamic` を使って遅延読み込みしてください。
- クライアントサイドでのみ必要なコンポーネントは `ssr: false` オプションを指定します。

# 4. SEOとメタデータ

- 動的なページでは、必ず `generateMetadata` 関数を `export` してください。
- ページの内容に基づいて、`title`, `description`, `openGraph` などのメタデータを生成します。
- `alternates: { canonical: ... }` を設定し、正規URLを明示してください。

# 5. エラーハンドリング

- `error.tsx`: ルートセグメント単位でのエラーUIを定義します。`reset` 関数で再試行の機能を提供してください。
- `global-error.tsx`: ルートレイアウト (`app/layout.tsx`) 自体のエラーを捕捉するための、より高レベルなエラーUIです。
- エラーコンポーネント内では、`useEffect` を使ってエラー情報をロギングサービス（Sentry, Logtailなど）に送信してください。

# 6. キャッシング戦略

- `fetch` APIのキャッシュオプションを最大限に活用してください。
  - **静的データ:** デフォルト（オプションなし）。
  - **時間ベース再検証:** `next: { revalidate: 3600 }`
  - **動的データ:** `cache: 'no-store'`
  - **オンデマンド再検証:** `next: { tags: ['...'] }` を設定し、Server Action内で `revalidateTag('...')` を呼び出します。

# 7. 型安全性の確保

- **Route Handlers:** `NextRequest` を引数に取り、必ず `NextResponse` を返却します。リクエストのクエリパラメータやボディはZodでパースし、失敗した場合はステータスコード400でエラーレスポンスを返してください。
- **環境変数:** `lib/env.ts` などでZodを使い、`process.env` をパースして型安全な `env` オブジェクトを作成してください。これにより、環境変数の欠落や型の間違いをビルド時に検知できます。

# 8. セキュリティ

- **CSP:** `next.config.js` で厳格なContent Security Policy（コンテンツセキュリティポリシー）を設定してください。
- **その他ヘッダー:** `X-Frame-Options: 'DENY'` や `X-Content-Type-Options: 'nosniff'` などのセキュリティヘッダーも設定してください。

# 9. 開発効率化

- **`cn` ユーティリティ:** `clsx` と `tailwind-merge` を組み合わせた `cn` 関数を `lib/utils/` に作成し、条件付きのTailwind CSSクラスを安全に適用してください。
- **カスタムフック:** `useDebounce` のような再利用可能なクライアントサイドのロジックは、`lib/hooks/` にカスタムフックとして切り出してください。